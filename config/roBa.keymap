#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    apping-term-ms = <400>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W                &kp E         &kp R         &kp T                                                &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &lt 5 S              &kp D         &kp F         &kp G        &mkp MB1             &kp LEFT_BRACKET   &kp H        &kp J  &kp K      &kp L    &mt LEFT_GUI MINUS
&mt LEFT_SHIFT Z    &kp X                &kp C         &kp V         &lt 6 B      &kp TAB              &kp RIGHT_BRACKET  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RSHFT SEMI
&kp LCTRL           &mt LEFT_GUI ESCAPE  &kp LEFT_ALT  &kp LEFT_GUI  &lt 2 SPACE  &lt 1 LC(SPACE)      &kp BACKSPACE      &lt 3 ENTER                             &mt LS(LA(LEFT_CONTROL)) SLASH
            >;

            sensor-bindings = <&inc_dec_kp LA(RIGHT) LA(LEFT)>;
        };

        NUM_ARROW {
            bindings = <
&kp ESCAPE            &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp KP_PLUS                                               &kp KP_SLASH  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9           &kp BACKSLASH
&kp LG(A)             &kp LEFT         &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp KP_MINUS     &none             &kp LEFT_PARENTHESIS   &kp KP_EQUAL  &kp NUMBER_4  &kp N5        &mt LEFT_ALT NUMBER_6  &mt RIGHT_GUI GRAVE
&mt LEFT_SHIFT LG(Z)  &kp LG(X)        &kp LG(C)       &kp LG(V)        &kp KP_ASTERISK  &kp KP_SLASH      &kp RIGHT_PARENTHESIS  &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3           &kp RIGHT_SHIFT
&trans                &trans           &trans          &trans           &trans           &trans            &mt LEFT_GUI COMMA     &kp NUMBER_0                                                     &none
            >;
        };

        FUNCTION {
            bindings = <
&kp ESCAPE      &kp LG(M)             &none       &none             &none                             &none          &kp F7  &kp F8  &kp F9  &kp F13
&none           &kp LC(F4)            &kp LC(F3)  &kp LC(UP_ARROW)  &none   &trans      &none         &kp LC(MINUS)  &kp F4  &kp F5  &kp F6  &kp F12
&kp LEFT_SHIFT  &kp LG(LS(NUMBER_4))  &none       &none             &none   &trans      &kp LC(DOWN)  &none          &kp F1  &kp F2  &kp F3  &kp F11
&trans          &trans                &trans      &trans            &trans  &trans      &trans        &trans                                 &kp F10
            >;
        };

        MARK_SELECT {
            bindings = <
&kp ESCAPE                &none                       &kp LS(LG(UP_ARROW))    &none                        &none                                                   &kp AT_SIGN  &kp AMPERSAND      &kp PIPE          &kp KP_EQUAL  &kp CARET
&kp LS(LC(LEFT_ARROW))    &kp LS(LG(LEFT_ARROW))      &kp LS(LG(DOWN_ARROW))  &kp LG(LS(RIGHT_ARROW))      &kp LS(LC(RIGHT_ARROW))  &trans                 &none   &kp QMARK    &kp HASH           &kp PERCENT       &kp KP_SLASH  &kp TILDE
&mt LEFT_SHIFT LS(LA(Z))  &kp LS(LA(LC(LEFT_ARROW)))  &kp LA(LS(K))           &kp LS(LA(LC(RIGHT_ARROW)))  &none                    &kp LS(LA(ENTER))      &none   &kp EXCL     &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp DOLLAR    &kp BACKSLASH
&kp LS(LA(SPACE))         &kp LS(LA(H))               &kp LS(LA(L))           &kp LS(LA(N))                &trans                   &trans                 &trans  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
